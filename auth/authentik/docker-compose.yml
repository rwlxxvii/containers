version: "3"

volumes:
  authentik-postgres:
    driver: local
  redis:
    driver: local

networks:
  authentik-net:
    driver: bridge
    ipam:
      config:
        - subnet: ${AUTHENTIK_SUBNET}
          gateway: ${AUTHENTIK_GATEWAY}

services:
  postgresql:
    image: docker.io/bitnami/postgresql:latest
    container_name: postgres-authentik
    hostname: postgres-authentik.dev.io
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRESQL_DATABASE} -U $${POSTGRESQL_USERNAME}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - authentik-postgres:/bitnami/postgresql:z
    environment:
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
      POSTGRESQL_REPLICATION_USER: ${POSTGRESQL_REPLICATION_USER}
      POSTGRESQL_REPLICATION_PASSWORD: ${POSTGRESQL_REPLICATION_PASSWORD}
    env_file:
      - .env
    ports:
      - 5432:5432
    networks:
      authentik-net:
        ipv4_address: ${POSTGRESQL_IPv4}

  redis:
    image: docker.io/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data:z
    ports:
      - 6379:6379
    networks:
      authentik-net:
        ipv4_address: ${REDIS_IPv4}

  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.10.4}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRESQL_USERNAME}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRESQL_DATABASE}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRESQL_PASSWORD}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    env_file:
      - .env
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      authentik-net:
        ipv4_address: ${SERVER_IPv4}

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.10.4}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRESQL_USERNAME}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRESQL_DATABASE}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRESQL_PASSWORD}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    #user: root
    volumes:
      # run as user authentik
      # systemctl --user enable podman.socket
      - $XDG_RUNTIME_DIR/podman/podman.sock:/var/run/docker.sock:ro
      #- /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      authentik-net:
        ipv4_address: ${WORKER_IPv4}

  backups:
    image: docker.io/bitnami/postgresql:latest
    container_name: postgres2-authentik
    hostname: postgres2-authentik.dev.io
    security_opt:
      - no-new-privileges:true
    command: sh -c 'sleep 30m
             && while true; do
             PGPASSWORD="$$(echo $$POSTGRESQL_PASSWORD)"
             pg_dump
             -h postgres-authentik.dev.io
             -p 5432
             -d "${POSTGRESQL_DATABASE}"
             -U "${POSTGRESQL_USERNAME} | gzip > /srv/authentik-postgres/backups/authentik-postgres-backup-$$(date "+%Y-%m-%d_%H-%M").gz
             && find /srv/authentik-postgres/backups -type f -mtime +7 | xargs rm -f;
             sleep 24h; done'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - authentik-postgres:/bitnami/postgresql:z
      - authentik-postgres-backups:/srv/authentik-postgres/backups:Z
    environment:
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: ${POSTGRESQL_REPLICATION_USER}
      POSTGRESQL_REPLICATION_PASSWORD: ${POSTGRESQL_REPLICATION_PASSWORD}
      POSTGRESQL_MASTER_HOST: postgres
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_MASTER_PORT_NUMBER: 5432
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRESQL_DATABASE} -U $${POSTGRESQL_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    ports:
      - 5432:5432
    networks:
      sonarnet:
        ipv4_address: ${BACKUP_POSTGRESQL_IPv4}