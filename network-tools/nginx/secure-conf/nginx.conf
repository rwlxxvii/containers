# the following are options to securing the backend web app

http {
    # log errthang
    log_format    main '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
    access_log    "/var/log/nginx/logs/access.log" main;
    #Ensure HTTP responses that contain HTML pages have the X-Frame-Options header set.
    add_header    X-Frame-Options "SAMEORIGIN; DENY; ALLOW-FROM uri";
    #Check that the HTTP Strict-Transport-Security (HSTS) header is present on all HTTP responses.
    add_header    Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
    #Ensure the HTTP responses contain the X-Content-Type-Options: nosniff header.
    add_header    X-Content-Type-Options nosniff;
    #Check if the X-XSS-Protection header is present. This header is mostly not used by modern browsers and is not required if a strong Content-Security-Policy is used that blocks inline JavaScript.
    add_header    X-XSS-Protection "1; mode=block";
    #Check that the Referrer-Policy header is present on HTTP responses that return HTML to minimise data leakage via the Referer header added by the browser.
    add_header    Referrer-Policy no-referrer;
    add_header    Referrer-Policy strict-origin;
    #Check that the Content-Security-Policy (CSP) header is present on HTTP responses that return HTML and JavaScript.
    add_header    Content-Security-Policy "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'self'; form-action 'self';" always;
    #Ensure that session cookies used by the web application have the HttpOnly attribute set. Cookies will this attribute set can not be accessed via JavaScript.
    add_header    Set-Cookie "Path=/<web app path>; HttpOnly; Secure";
    #Ensure that session cookies used by the web application have the SameSite attribute set and is not the value None.
    add_header    Set-Cookie "<cookie-name>=<cookie-value>; SameSite=Strict";

    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_stapling        on;
    ssl_stapling_verify on;
    ssl_session_cache   shared:SSL:50m;
    ssl_session_timeout 1d;
    
    #Ensure the server does not disclose any information about the underlying server software or operating system.
    server_tokens off;
}