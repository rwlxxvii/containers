version: "3"

volumes:
  artifactory-postgres:
  artifactory-data:
  artifactory-postgres-backups:

networks:
  artifactory-net:

x-common-vars-apps: &common-vars-apps
  security_opt:
    - no-new-privileges:true
  networks:
    - artifactory-net
  env_file:
    - .env
  restart: unless-stopped

services:
  postgresql:
    <<: *common-vars-apps
    image: docker.io/bitnami/postgresql:13
    container_name: postgres-artifactory
    hostname: postgres-artifactory.dev.io
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRESQL_DATABASE} -U $${POSTGRESQL_USERNAME}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - artifactory-postgres:/bitnami/postgresql:z
    environment:
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
      POSTGRESQL_REPLICATION_USER: ${POSTGRESQL_REPLICATION_USER}
      POSTGRESQL_REPLICATION_PASSWORD: ${POSTGRESQL_REPLICATION_PASSWORD}
    ports:
      - 5432:5432
    deploy:
      mode: global
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 512M

  artifactory:
    <<: *common-vars-apps
    build:
      context: ./
    container_name: artifactory
    hostname: artifactory.dev.io
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - artifactory-data:/var/opt/jfrog/artifactory:Z
    command:
      - sh
      - -c
      - |
        echo "type: postgresql" | tee -a /opt/jfrog/artifactory/var/etc/system.yaml
        echo "driver: org.postgresql.Driver" | tee -a /opt/jfrog/artifactory/var/etc/system.yaml
        echo "url: "jdbc:postgresql://postgres-artifactory.dev.io:5432/${POSTGRESQL_DATABASE}" | tee -a /opt/jfrog/artifactory/var/etc/system.yaml
        echo "username: ${POSTGRESQL_USERNAME}" | tee -a /opt/jfrog/artifactory/var/etc/system.yaml
        echo "password: ${POSTGRESQL_PASSWORD}" | tee -a /opt/jfrog/artifactory/var/etc/system.yaml
        /opt/jfrog/artifactory/app/bin/artifactoryctl
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "10"
    depends_on:
      postgresql:
        condition: service_healthy
    ulimits:
      nproc: 65535
      nofile:
        soft: 32000
        hard: 40000
    ports:
      - 8081:8081
      - 8082:8082
      - 8085:8085
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 512M

  backups:
    <<: *common-vars-apps
    image: docker.io/bitnami/postgresql:13
    container_name: postgres2-artifactory
    hostname: postgres2-artifactory.dev.io
    command: 
      - sh
      - -c
      - |
        sleep 30m
        && while true; do
        pg_dump
        -h postgres-artifactory.dev.io
        -p 5432
        -d "${POSTGRESQL_DATABASE}"
        -U "${POSTGRESQL_USERNAME} | gzip > /srv/artifactory-postgres/backups/artifactory-postgres-backup-$$(date "+%Y-%m-%d_%H-%M").gz
        && find /srv/artifactory-postgres/backups -type f -mtime +7 | xargs rm -f;
        sleep 24h; done
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - artifactory-postgres:/bitnami/postgresql:z
      - artifactory-postgres-backups:/srv/artifactory-postgres/backups:Z
    environment:
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: ${POSTGRESQL_REPLICATION_USER}
      POSTGRESQL_REPLICATION_PASSWORD: ${POSTGRESQL_REPLICATION_PASSWORD}
      POSTGRESQL_MASTER_HOST: postgres-artifactory.dev.io
      POSTGRESQL_MASTER_PORT_NUMBER: 5432
    depends_on:
      postgresql:
        condition: service_healthy
      artifactory:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRESQL_DATABASE} -U $${POSTGRESQL_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    ports:
      - 5432:5432
    deploy:
      mode: global
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 512M