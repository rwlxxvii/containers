version: '3'

volumes:
  grafana-postgres:
  grafana-postgres-backups:
  traefik-certificates:

networks:
  grafana:
    name: grafana
    driver: bridge
    
services:
  postgres:
    image: docker.io/bitnami/postgresql:latest
    container_name: postgres
    hostname: postgres-grafana.io
    ports:
      - 5432:5432
    volumes:
      - grafana-postgres:/bitnami/postgresql:z
    environment:
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
      POSTGRESQL_REPLICATION_USER: ${POSTGRESQL_REPLICATION_USER}
      POSTGRESQL_REPLICATION_PASSWORD: ${POSTGRESQL_REPLICATION_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - grafana

  grafana:
    image: docker.io/bitnami/grafana:latest
    container_name: grafana
    hostname: grafana.io
    volumes:
      - ./ldap.toml:/etc/grafana/ldap.toml
    ports:
      - "3000:3000"
    environment:
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres-grafana.io:5432
      GF_DATABASE_NAME: ${POSTGRESQL_DATABASE}
      GF_DATABASE_USER: ${POSTGRESQL_USER}
      GF_DATABASE_PASSWORD: ${POSTGRESQL_PASSWORD}
      GF_SERVER_DOMAIN: ${GF_SERVER_DOMAIN}
      GF_SERVER_ROOT_URL: ${GF_SERVER_ROOT_URL}
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_AUTH_ANONYMOUS_ENABLED: 'false'
      GF_AUTH_ANONYMOUS_DISABLE_LOGIN_FORM: 'false'
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_AUTH_LDAP_ENABLED: 'true'
      GF_AUTH_LDAP_ALLOW_SIGN_UP: 'true'
      GF_AUTH_LDAP_CONFIG_FILE: /etc/grafana/ldap.toml
      GF_INSTALL_PLUGINS: alexanderzobnin-zabbix-app
      GF_USERS_LOGIN_HINT: username
      GF_SMTP_ENABLED: 'true'
      GF_SMTP_HOST: ${GF_SMTP_HOST}:587
      GF_SMTP_USER: ${GF_SMTP_USER}
      GF_SMTP_PASSWORD: ${GF_SMTP_PASSWORD}
      GF_SMTP_FROM_NAME: Grafana Alert
      GF_SMTP_FROM_ADDRESS: ${GF_SMTP_FROM_ADDRESS}
    healthcheck:
      test: ["CMD", "wget", "http://localhost:3000/","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.io`)"
      - "traefik.http.routers.grafana.service=grafana"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.passhostheader=true"
      - "traefik.http.routers.grafana.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_healthy
    networks:
      - grafana

  traefik:
    image: docker.io/bitnami/traefik:latest
    container_name: traefik
    hostname: traefik.io
    command:
      - "--log.level=WARN"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entryPoints.ping.address=:8082"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # Email for Let's Encrypt (replace with yours)
      - "--certificatesresolvers.letsencrypt.acme.email=enter@email.here"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
    volumes:
      # systemctl --user enable podman.socket
      - $XDG_RUNTIME_DIR/podman/podman.sock:/var/run/docker.sock:ro
      - traefik-certificates:/etc/traefik/acme
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`enter.site.here`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      # Passwords must be encoded using MD5, SHA1, or BCrypt h
      - "traefik.http.middlewares.authtraefik.basicauth.users=traefikadmin:$$enter$$pass$$here"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped

  backups:
    image: docker.io/bitnami/postgresql:latest
    container_name: psql-backup
    hostname: grafana-backup-psql.io
    command: sh -c 'sleep 30m
             && while true; do
             PGPASSWORD="$$(echo $$POSTGRESQL_DATABASE)"
             pg_dump
             -h postgres-grafana.io
             -p 5432
             -d "${POSTGRESQL_DATABASE}"
             -U "${POSTGRESQL_USERNAME} | gzip > /srv/grafana-postgres/backups/grafana-postgres-backup-$$(date "+%Y-%m-%d_%H-%M").gz
             && find /srv/grafana-postgres/backups -type f -mtime +7 | xargs rm -f;
             sleep 24h; done'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - grafana-postgres:/bitnami/postgresql:z
      - grafana-postgres-backups:/srv/grafana-postgres/backups
    environment:
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: ${POSTGRESQL_REPLICATION_USER}
      POSTGRESQL_REPLICATION_PASSWORD: ${POSTGRESQL_REPLICATION_PASSWORD}
      POSTGRESQL_MASTER_HOST: postgres
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_MASTER_PORT_NUMBER: 5432
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      grafana:
        condition: service_healthy
    networks:
      - grafana
