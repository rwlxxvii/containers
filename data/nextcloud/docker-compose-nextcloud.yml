version: '3'

volumes:
  nextcloud-postgres:
  nextcloud-data:
  nextcloud-data-backups:
  nextcloud-postgres-backups:
  traefik-certificates:

networks:
  nextcloud:
    driver: bridge
    ipam:
      config:
        - subnet: ${NEXTCLOUD_SUBNET}
          gateway: ${NEXTCLOUD_GATEWAY}
  traefik-net:
    external: true
    
services:
  postgresql:
    image: docker.io/bitnami/postgresql:latest
    container_name: postgres-nextcloud
    hostname: postgres-nextcloud.dev.io
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRESQL_DATABASE} -U $${POSTGRESQL_USERNAME}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - nextcloud-postgres:/bitnami/postgresql:z
    environment:
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
      POSTGRESQL_REPLICATION_USER: ${POSTGRESQL_REPLICATION_USER}
      POSTGRESQL_REPLICATION_PASSWORD: ${POSTGRESQL_REPLICATION_PASSWORD}
    env_file:
      - .env
    ports:
      - 5432:5432
    networks:
      nextcloud:
        ipv4_address: ${POSTGRESQL_IPv4}

  redis:
    image: docker.io/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data:z
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - 6379:6379
    networks:
      nextcloud:
        ipv4_address: ${REDIS_IPv4}

  traefik:
    image: docker.io/traefik:latest
    container_name: traefik
    hostname: traefik-nextcloud.io
    command:
      - "--log.level=WARN"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entryPoints.ping.address=:8082"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # Email for Let's Encrypt (replace with yours)
      - "--certificatesresolvers.letsencrypt.acme.email=your@email.here"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
    volumes:
      - $XDG_RUNTIME_DIR/podman/podman.sock:/var/run/docker.sock:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - traefik-certificates:/etc/traefik/acme:Z
    env_file:
      - .env
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8082/ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik-nextcloud.io`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      # Passwords must be encoded using MD5, SHA1, or BCrypt
      - "traefik.http.middlewares.authtraefik.basicauth.users=traefikadmin:$$enter$$hashed$$passhere"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped
    networks:
      - traefik-net

  authelia:
    image: docker.io/authelia/authelia:latest
    container_name: authelia
    hostname: authelia-nextcloud.io
    restart: unless-stopped
    expose:
      - 9091
    volumes:
      - ./configuration.yml:/config/configuration.yml:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    environment:
      TZ: "America/Chicago"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--no-check-certificate", "--tries=1", "--spider", "http://$(echo $AUTHELIA_IPv4):9091/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.authelia.rule=Host(`authelia-nextcloud.io`)'
      - 'traefik.http.routers.authelia.entryPoints=https'
      - 'traefik.http.routers.authelia.tls=true'
      - 'traefik.http.middlewares.authelia.forwardAuth.address=http://authelia:9091/api/verify?rd=https://authelia-nextcloud.io'
      - 'traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader=true'
      - 'traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email'
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      nextcloud:
        ipv4_address: ${AUTHELIA_IPv4}
      traefik-net:

  nextcloud:
    image: docker.io/nextcloud:latest
    container_name: nextcloud
    hostname: nextcloud.io
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - nextcloud-data:/var/www/html:Z
    env_file:
      - .env
    ports:
      - "8900:80"
    environment:
      POSTGRES_HOST: postgres-nextcloud.dev.io
      DB_PORT: 5432
      POSTGRES_DB: ${POSTGRESQL_DATABASE}
      POSTGRES_USER: ${POSTGRESQL_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD}
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD}
      NEXTCLOUD_TRUSTED_DOMAINS: ${NEXTCLOUD_TRUSTED_DOMAINS}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://$(echo $NEXTCLOUD_IPv4):80/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.io`)"
      - "traefik.http.routers.nextcloud.service=nextcloud"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=8900"
      - "traefik.http.routers.nextcloud.tls=true"
      - "traefik.http.routers.nextcloud.tls.certresolver=letsencrypt"
      - "traefik.http.services.nextcloud.loadbalancer.passhostheader=true"
      - "traefik.http.routers.nextcloud.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_healthy
      redis:
        condition: service_healthy
      authelia:
        condition: service_healthy
    networks:
      nextcloud:
        ipv4_address: ${NEXTCLOUD_IPv4}
      traefik-net:

  backups:
    image: docker.io/bitnami/postgresql:latest
    container_name: postgres2-nextcloud
    hostname: postgres2-nextcloud.dev.io
    security_opt:
      - no-new-privileges:true
    command: 
      - sh
      - -c
      - |
        sleep 30m
        && while true; do
        pg_dump
        -h postgres-nextcloud.dev.io
        -p 5432
        -d "${POSTGRESQL_DATABASE}"
        -U "${POSTGRESQL_USERNAME} | gzip > /srv/nextcloud-postgres/backups/nextcloud-postgres-backup-$$(date "+%Y-%m-%d_%H-%M").gz
        && find /srv/nextcloud-postgres/backups -type f -mtime +7 | xargs rm -f;
        sleep 24h; done
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - nextcloud-postgres:/bitnami/postgresql:z
      - nextcloud-postgres-backups:/srv/nextcloud-postgres/backups:Z
    env_file:
      - .env
    environment:
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: ${POSTGRESQL_REPLICATION_USER}
      POSTGRESQL_REPLICATION_PASSWORD: ${POSTGRESQL_REPLICATION_PASSWORD}
      POSTGRESQL_MASTER_HOST: postgres-nextcloud.dev.io
      POSTGRESQL_PASSWORD: ${BACKUP_POSTGRESQL_PASSWORD}
      POSTGRESQL_MASTER_PORT_NUMBER: 5432
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      nextcloud:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRESQL_DATABASE} -U $${POSTGRESQL_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    ports:
      - 5432:5432
    networks:
      nextcloud:
        ipv4_address: ${BACKUP_POSTGRESQL_IPv4}